/* tslint:disable */
/* eslint-disable */
/**
 * 规范化接口演示
 * 让 .NET 开发更简单，更通用，更流行。
 *
 * OpenAPI spec version: 1.0.0
 * Contact: monksoul@outlook.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, {
   AxiosResponse,
   AxiosInstance,
   AxiosRequestConfig,
} from "axios"
import { Configuration } from "../configuration"
// Some imports not used depending on template conditions
// @ts-ignore
import {
   BASE_PATH,
   COLLECTION_FORMATS,
   RequestArgs,
   BaseAPI,
   RequiredError,
} from "../base"
import { CreateBrandDto } from "../models"
import { GroupingInfo } from "../models"
import { RESTfulResultBrandSimpleDto } from "../models"
import { RESTfulResultIActionResult } from "../models"
import { RESTfulResultLoadResult } from "../models"
import { RESTfulResultPaginatedResponseBrandSimpleDto } from "../models"
import { SortingInfo } from "../models"
import { SummaryInfo } from "../models"
import { UpdateBrandDto } from "../models"
/**
 * BrandApi - axios parameter creator
 * @export
 */
export const BrandApiAxiosParamCreator = function (
   configuration?: Configuration,
) {
   return {
      /**
       *
       * @param {number} id
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      apiBrandBrandIdDelete: async (
         id: number,
         options: AxiosRequestConfig = {},
      ): Promise<RequestArgs> => {
         // verify required parameter 'id' is not null or undefined
         if (id === null || id === undefined) {
            throw new RequiredError(
               "id",
               "Required parameter id was null or undefined when calling apiBrandBrandIdDelete.",
            )
         }
         const localVarPath = `/api/brand/brand/{id}`.replace(
            `{${"id"}}`,
            encodeURIComponent(String(id)),
         )
         // use dummy base URL string because the URL constructor only accepts absolute URLs.
         const localVarUrlObj = new URL(localVarPath, "https://example.com")
         let baseOptions
         if (configuration) {
            baseOptions = configuration.baseOptions
         }
         const localVarRequestOptions: AxiosRequestConfig = {
            method: "DELETE",
            ...baseOptions,
            ...options,
         }
         const localVarHeaderParameter = {} as any
         const localVarQueryParameter = {} as any

         // authentication Bearer required
         // http bearer authentication required
         if (configuration && configuration.accessToken) {
            const accessToken =
               typeof configuration.accessToken === "function"
                  ? await configuration.accessToken()
                  : await configuration.accessToken
            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken
         }

         const query = new URLSearchParams(localVarUrlObj.search)
         for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key])
         }
         for (const key in options.params) {
            query.set(key, options.params[key])
         }
         localVarUrlObj.search = new URLSearchParams(query).toString()
         let headersFromBaseOptions =
            baseOptions && baseOptions.headers ? baseOptions.headers : {}
         localVarRequestOptions.headers = {
            ...localVarHeaderParameter,
            ...headersFromBaseOptions,
            ...options.headers,
         }

         return {
            url:
               localVarUrlObj.pathname +
               localVarUrlObj.search +
               localVarUrlObj.hash,
            options: localVarRequestOptions,
         }
      },
      /**
       *
       * @param {number} id
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      apiBrandBrandIdGet: async (
         id: number,
         options: AxiosRequestConfig = {},
      ): Promise<RequestArgs> => {
         // verify required parameter 'id' is not null or undefined
         if (id === null || id === undefined) {
            throw new RequiredError(
               "id",
               "Required parameter id was null or undefined when calling apiBrandBrandIdGet.",
            )
         }
         const localVarPath = `/api/brand/brand/{id}`.replace(
            `{${"id"}}`,
            encodeURIComponent(String(id)),
         )
         // use dummy base URL string because the URL constructor only accepts absolute URLs.
         const localVarUrlObj = new URL(localVarPath, "https://example.com")
         let baseOptions
         if (configuration) {
            baseOptions = configuration.baseOptions
         }
         const localVarRequestOptions: AxiosRequestConfig = {
            method: "GET",
            ...baseOptions,
            ...options,
         }
         const localVarHeaderParameter = {} as any
         const localVarQueryParameter = {} as any

         // authentication Bearer required
         // http bearer authentication required
         if (configuration && configuration.accessToken) {
            const accessToken =
               typeof configuration.accessToken === "function"
                  ? await configuration.accessToken()
                  : await configuration.accessToken
            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken
         }

         const query = new URLSearchParams(localVarUrlObj.search)
         for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key])
         }
         for (const key in options.params) {
            query.set(key, options.params[key])
         }
         localVarUrlObj.search = new URLSearchParams(query).toString()
         let headersFromBaseOptions =
            baseOptions && baseOptions.headers ? baseOptions.headers : {}
         localVarRequestOptions.headers = {
            ...localVarHeaderParameter,
            ...headersFromBaseOptions,
            ...options.headers,
         }

         return {
            url:
               localVarUrlObj.pathname +
               localVarUrlObj.search +
               localVarUrlObj.hash,
            options: localVarRequestOptions,
         }
      },
      /**
       *
       * @param {number} id
       * @param {UpdateBrandDto} [body]
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      apiBrandBrandIdPut: async (
         id: number,
         body?: UpdateBrandDto,
         options: AxiosRequestConfig = {},
      ): Promise<RequestArgs> => {
         // verify required parameter 'id' is not null or undefined
         if (id === null || id === undefined) {
            throw new RequiredError(
               "id",
               "Required parameter id was null or undefined when calling apiBrandBrandIdPut.",
            )
         }
         const localVarPath = `/api/brand/brand/{id}`.replace(
            `{${"id"}}`,
            encodeURIComponent(String(id)),
         )
         // use dummy base URL string because the URL constructor only accepts absolute URLs.
         const localVarUrlObj = new URL(localVarPath, "https://example.com")
         let baseOptions
         if (configuration) {
            baseOptions = configuration.baseOptions
         }
         const localVarRequestOptions: AxiosRequestConfig = {
            method: "PUT",
            ...baseOptions,
            ...options,
         }
         const localVarHeaderParameter = {} as any
         const localVarQueryParameter = {} as any

         // authentication Bearer required
         // http bearer authentication required
         if (configuration && configuration.accessToken) {
            const accessToken =
               typeof configuration.accessToken === "function"
                  ? await configuration.accessToken()
                  : await configuration.accessToken
            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken
         }

         localVarHeaderParameter["Content-Type"] = "application/json"

         const query = new URLSearchParams(localVarUrlObj.search)
         for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key])
         }
         for (const key in options.params) {
            query.set(key, options.params[key])
         }
         localVarUrlObj.search = new URLSearchParams(query).toString()
         let headersFromBaseOptions =
            baseOptions && baseOptions.headers ? baseOptions.headers : {}
         localVarRequestOptions.headers = {
            ...localVarHeaderParameter,
            ...headersFromBaseOptions,
            ...options.headers,
         }
         const needsSerialization =
            typeof body !== "string" ||
            localVarRequestOptions.headers["Content-Type"] ===
               "application/json"
         localVarRequestOptions.data = needsSerialization
            ? JSON.stringify(body !== undefined ? body : {})
            : body || ""

         return {
            url:
               localVarUrlObj.pathname +
               localVarUrlObj.search +
               localVarUrlObj.hash,
            options: localVarRequestOptions,
         }
      },
      /**
       *
       * @param {CreateBrandDto} [body]
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      apiBrandBrandPost: async (
         body?: CreateBrandDto,
         options: AxiosRequestConfig = {},
      ): Promise<RequestArgs> => {
         const localVarPath = `/api/brand/brand`
         // use dummy base URL string because the URL constructor only accepts absolute URLs.
         const localVarUrlObj = new URL(localVarPath, "https://example.com")
         let baseOptions
         if (configuration) {
            baseOptions = configuration.baseOptions
         }
         const localVarRequestOptions: AxiosRequestConfig = {
            method: "POST",
            ...baseOptions,
            ...options,
         }
         const localVarHeaderParameter = {} as any
         const localVarQueryParameter = {} as any

         // authentication Bearer required
         // http bearer authentication required
         if (configuration && configuration.accessToken) {
            const accessToken =
               typeof configuration.accessToken === "function"
                  ? await configuration.accessToken()
                  : await configuration.accessToken
            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken
         }

         localVarHeaderParameter["Content-Type"] = "application/json"

         const query = new URLSearchParams(localVarUrlObj.search)
         for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key])
         }
         for (const key in options.params) {
            query.set(key, options.params[key])
         }
         localVarUrlObj.search = new URLSearchParams(query).toString()
         let headersFromBaseOptions =
            baseOptions && baseOptions.headers ? baseOptions.headers : {}
         localVarRequestOptions.headers = {
            ...localVarHeaderParameter,
            ...headersFromBaseOptions,
            ...options.headers,
         }
         const needsSerialization =
            typeof body !== "string" ||
            localVarRequestOptions.headers["Content-Type"] ===
               "application/json"
         localVarRequestOptions.data = needsSerialization
            ? JSON.stringify(body !== undefined ? body : {})
            : body || ""

         return {
            url:
               localVarUrlObj.pathname +
               localVarUrlObj.search +
               localVarUrlObj.hash,
            options: localVarRequestOptions,
         }
      },
      /**
       *
       * @param {boolean} [requireTotalCount]
       * @param {boolean} [requireGroupCount]
       * @param {boolean} [isCountQuery]
       * @param {boolean} [isSummaryQuery]
       * @param {number} [skip]
       * @param {number} [take]
       * @param {Array<SortingInfo>} [sort]
       * @param {Array<GroupingInfo>} [group]
       * @param {Array<any>} [filter]
       * @param {Array<SummaryInfo>} [totalSummary]
       * @param {Array<SummaryInfo>} [groupSummary]
       * @param {Array<string>} [select]
       * @param {Array<string>} [preSelect]
       * @param {boolean} [remoteSelect]
       * @param {boolean} [remoteGrouping]
       * @param {boolean} [expandLinqSumType]
       * @param {Array<string>} [primaryKey]
       * @param {string} [defaultSort]
       * @param {boolean} [stringToLower]
       * @param {boolean} [paginateViaPrimaryKey]
       * @param {boolean} [sortByPrimaryKey]
       * @param {boolean} [allowAsyncOverSync]
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      apiBrandBrandsForGridGet: async (
         requireTotalCount?: boolean,
         requireGroupCount?: boolean,
         isCountQuery?: boolean,
         isSummaryQuery?: boolean,
         skip?: number,
         take?: number,
         sort?: Array<SortingInfo>,
         group?: Array<GroupingInfo>,
         filter?: Array<any>,
         totalSummary?: Array<SummaryInfo>,
         groupSummary?: Array<SummaryInfo>,
         select?: Array<string>,
         preSelect?: Array<string>,
         remoteSelect?: boolean,
         remoteGrouping?: boolean,
         expandLinqSumType?: boolean,
         primaryKey?: Array<string>,
         defaultSort?: string,
         stringToLower?: boolean,
         paginateViaPrimaryKey?: boolean,
         sortByPrimaryKey?: boolean,
         allowAsyncOverSync?: boolean,
         options: AxiosRequestConfig = {},
      ): Promise<RequestArgs> => {
         const localVarPath = `/api/brand/brands-for-grid`
         // use dummy base URL string because the URL constructor only accepts absolute URLs.
         const localVarUrlObj = new URL(localVarPath, "https://example.com")
         let baseOptions
         if (configuration) {
            baseOptions = configuration.baseOptions
         }
         const localVarRequestOptions: AxiosRequestConfig = {
            method: "GET",
            ...baseOptions,
            ...options,
         }
         const localVarHeaderParameter = {} as any
         const localVarQueryParameter = {} as any

         // authentication Bearer required
         // http bearer authentication required
         if (configuration && configuration.accessToken) {
            const accessToken =
               typeof configuration.accessToken === "function"
                  ? await configuration.accessToken()
                  : await configuration.accessToken
            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken
         }

         if (requireTotalCount !== undefined) {
            localVarQueryParameter["RequireTotalCount"] = requireTotalCount
         }

         if (requireGroupCount !== undefined) {
            localVarQueryParameter["RequireGroupCount"] = requireGroupCount
         }

         if (isCountQuery !== undefined) {
            localVarQueryParameter["IsCountQuery"] = isCountQuery
         }

         if (isSummaryQuery !== undefined) {
            localVarQueryParameter["IsSummaryQuery"] = isSummaryQuery
         }

         if (skip !== undefined) {
            localVarQueryParameter["Skip"] = skip
         }

         if (take !== undefined) {
            localVarQueryParameter["Take"] = take
         }

         if (sort) {
            localVarQueryParameter["Sort"] = sort
         }

         if (group) {
            localVarQueryParameter["Group"] = group
         }

         if (filter) {
            localVarQueryParameter["Filter"] = filter
         }

         if (totalSummary) {
            localVarQueryParameter["TotalSummary"] = totalSummary
         }

         if (groupSummary) {
            localVarQueryParameter["GroupSummary"] = groupSummary
         }

         if (select) {
            localVarQueryParameter["Select"] = select
         }

         if (preSelect) {
            localVarQueryParameter["PreSelect"] = preSelect
         }

         if (remoteSelect !== undefined) {
            localVarQueryParameter["RemoteSelect"] = remoteSelect
         }

         if (remoteGrouping !== undefined) {
            localVarQueryParameter["RemoteGrouping"] = remoteGrouping
         }

         if (expandLinqSumType !== undefined) {
            localVarQueryParameter["ExpandLinqSumType"] = expandLinqSumType
         }

         if (primaryKey) {
            localVarQueryParameter["PrimaryKey"] = primaryKey
         }

         if (defaultSort !== undefined) {
            localVarQueryParameter["DefaultSort"] = defaultSort
         }

         if (stringToLower !== undefined) {
            localVarQueryParameter["StringToLower"] = stringToLower
         }

         if (paginateViaPrimaryKey !== undefined) {
            localVarQueryParameter["PaginateViaPrimaryKey"] =
               paginateViaPrimaryKey
         }

         if (sortByPrimaryKey !== undefined) {
            localVarQueryParameter["SortByPrimaryKey"] = sortByPrimaryKey
         }

         if (allowAsyncOverSync !== undefined) {
            localVarQueryParameter["AllowAsyncOverSync"] = allowAsyncOverSync
         }

         const query = new URLSearchParams(localVarUrlObj.search)
         for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key])
         }
         for (const key in options.params) {
            query.set(key, options.params[key])
         }
         localVarUrlObj.search = new URLSearchParams(query).toString()
         let headersFromBaseOptions =
            baseOptions && baseOptions.headers ? baseOptions.headers : {}
         localVarRequestOptions.headers = {
            ...localVarHeaderParameter,
            ...headersFromBaseOptions,
            ...options.headers,
         }

         return {
            url:
               localVarUrlObj.pathname +
               localVarUrlObj.search +
               localVarUrlObj.hash,
            options: localVarRequestOptions,
         }
      },
      /**
       *
       * @param {number} [pageNumber]
       * @param {number} [pageSize]
       * @param {string} [columnName]
       * @param {string} [columnValue]
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      apiBrandBrandsGet: async (
         pageNumber?: number,
         pageSize?: number,
         columnName?: string,
         columnValue?: string,
         options: AxiosRequestConfig = {},
      ): Promise<RequestArgs> => {
         const localVarPath = `/api/brand/brands`
         // use dummy base URL string because the URL constructor only accepts absolute URLs.
         const localVarUrlObj = new URL(localVarPath, "https://example.com")
         let baseOptions
         if (configuration) {
            baseOptions = configuration.baseOptions
         }
         const localVarRequestOptions: AxiosRequestConfig = {
            method: "GET",
            ...baseOptions,
            ...options,
         }
         const localVarHeaderParameter = {} as any
         const localVarQueryParameter = {} as any

         // authentication Bearer required
         // http bearer authentication required
         if (configuration && configuration.accessToken) {
            const accessToken =
               typeof configuration.accessToken === "function"
                  ? await configuration.accessToken()
                  : await configuration.accessToken
            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken
         }

         if (pageNumber !== undefined) {
            localVarQueryParameter["PageNumber"] = pageNumber
         }

         if (pageSize !== undefined) {
            localVarQueryParameter["PageSize"] = pageSize
         }

         if (columnName !== undefined) {
            localVarQueryParameter["ColumnName"] = columnName
         }

         if (columnValue !== undefined) {
            localVarQueryParameter["ColumnValue"] = columnValue
         }

         const query = new URLSearchParams(localVarUrlObj.search)
         for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key])
         }
         for (const key in options.params) {
            query.set(key, options.params[key])
         }
         localVarUrlObj.search = new URLSearchParams(query).toString()
         let headersFromBaseOptions =
            baseOptions && baseOptions.headers ? baseOptions.headers : {}
         localVarRequestOptions.headers = {
            ...localVarHeaderParameter,
            ...headersFromBaseOptions,
            ...options.headers,
         }

         return {
            url:
               localVarUrlObj.pathname +
               localVarUrlObj.search +
               localVarUrlObj.hash,
            options: localVarRequestOptions,
         }
      },
      /**
       *
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      apiBrandDownloadBrandExcelPost: async (
         options: AxiosRequestConfig = {},
      ): Promise<RequestArgs> => {
         const localVarPath = `/api/brand/download-brand-excel`
         // use dummy base URL string because the URL constructor only accepts absolute URLs.
         const localVarUrlObj = new URL(localVarPath, "https://example.com")
         let baseOptions
         if (configuration) {
            baseOptions = configuration.baseOptions
         }
         const localVarRequestOptions: AxiosRequestConfig = {
            method: "POST",
            ...baseOptions,
            ...options,
         }
         const localVarHeaderParameter = {} as any
         const localVarQueryParameter = {} as any

         // authentication Bearer required
         // http bearer authentication required
         if (configuration && configuration.accessToken) {
            const accessToken =
               typeof configuration.accessToken === "function"
                  ? await configuration.accessToken()
                  : await configuration.accessToken
            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken
         }

         const query = new URLSearchParams(localVarUrlObj.search)
         for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key])
         }
         for (const key in options.params) {
            query.set(key, options.params[key])
         }
         localVarUrlObj.search = new URLSearchParams(query).toString()
         let headersFromBaseOptions =
            baseOptions && baseOptions.headers ? baseOptions.headers : {}
         localVarRequestOptions.headers = {
            ...localVarHeaderParameter,
            ...headersFromBaseOptions,
            ...options.headers,
         }

         return {
            url:
               localVarUrlObj.pathname +
               localVarUrlObj.search +
               localVarUrlObj.hash,
            options: localVarRequestOptions,
         }
      },
      /**
       *
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      apiBrandDownloadBrandPdfPost: async (
         options: AxiosRequestConfig = {},
      ): Promise<RequestArgs> => {
         const localVarPath = `/api/brand/download-brand-pdf`
         // use dummy base URL string because the URL constructor only accepts absolute URLs.
         const localVarUrlObj = new URL(localVarPath, "https://example.com")
         let baseOptions
         if (configuration) {
            baseOptions = configuration.baseOptions
         }
         const localVarRequestOptions: AxiosRequestConfig = {
            method: "POST",
            ...baseOptions,
            ...options,
         }
         const localVarHeaderParameter = {} as any
         const localVarQueryParameter = {} as any

         // authentication Bearer required
         // http bearer authentication required
         if (configuration && configuration.accessToken) {
            const accessToken =
               typeof configuration.accessToken === "function"
                  ? await configuration.accessToken()
                  : await configuration.accessToken
            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken
         }

         const query = new URLSearchParams(localVarUrlObj.search)
         for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key])
         }
         for (const key in options.params) {
            query.set(key, options.params[key])
         }
         localVarUrlObj.search = new URLSearchParams(query).toString()
         let headersFromBaseOptions =
            baseOptions && baseOptions.headers ? baseOptions.headers : {}
         localVarRequestOptions.headers = {
            ...localVarHeaderParameter,
            ...headersFromBaseOptions,
            ...options.headers,
         }

         return {
            url:
               localVarUrlObj.pathname +
               localVarUrlObj.search +
               localVarUrlObj.hash,
            options: localVarRequestOptions,
         }
      },
   }
}

/**
 * BrandApi - functional programming interface
 * @export
 */
export const BrandApiFp = function (configuration?: Configuration) {
   return {
      /**
       *
       * @param {number} id
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async apiBrandBrandIdDelete(
         id: number,
         options?: AxiosRequestConfig,
      ): Promise<
         (
            axios?: AxiosInstance,
            basePath?: string,
         ) => Promise<AxiosResponse<RESTfulResultBrandSimpleDto>>
      > {
         const localVarAxiosArgs = await BrandApiAxiosParamCreator(
            configuration,
         ).apiBrandBrandIdDelete(id, options)
         return (
            axios: AxiosInstance = globalAxios,
            basePath: string = BASE_PATH,
         ) => {
            const axiosRequestArgs: AxiosRequestConfig = {
               ...localVarAxiosArgs.options,
               url: basePath + localVarAxiosArgs.url,
            }
            return axios.request(axiosRequestArgs)
         }
      },
      /**
       *
       * @param {number} id
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async apiBrandBrandIdGet(
         id: number,
         options?: AxiosRequestConfig,
      ): Promise<
         (
            axios?: AxiosInstance,
            basePath?: string,
         ) => Promise<AxiosResponse<RESTfulResultBrandSimpleDto>>
      > {
         const localVarAxiosArgs = await BrandApiAxiosParamCreator(
            configuration,
         ).apiBrandBrandIdGet(id, options)
         return (
            axios: AxiosInstance = globalAxios,
            basePath: string = BASE_PATH,
         ) => {
            const axiosRequestArgs: AxiosRequestConfig = {
               ...localVarAxiosArgs.options,
               url: basePath + localVarAxiosArgs.url,
            }
            return axios.request(axiosRequestArgs)
         }
      },
      /**
       *
       * @param {number} id
       * @param {UpdateBrandDto} [body]
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async apiBrandBrandIdPut(
         id: number,
         body?: UpdateBrandDto,
         options?: AxiosRequestConfig,
      ): Promise<
         (
            axios?: AxiosInstance,
            basePath?: string,
         ) => Promise<AxiosResponse<RESTfulResultBrandSimpleDto>>
      > {
         const localVarAxiosArgs = await BrandApiAxiosParamCreator(
            configuration,
         ).apiBrandBrandIdPut(id, body, options)
         return (
            axios: AxiosInstance = globalAxios,
            basePath: string = BASE_PATH,
         ) => {
            const axiosRequestArgs: AxiosRequestConfig = {
               ...localVarAxiosArgs.options,
               url: basePath + localVarAxiosArgs.url,
            }
            return axios.request(axiosRequestArgs)
         }
      },
      /**
       *
       * @param {CreateBrandDto} [body]
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async apiBrandBrandPost(
         body?: CreateBrandDto,
         options?: AxiosRequestConfig,
      ): Promise<
         (
            axios?: AxiosInstance,
            basePath?: string,
         ) => Promise<AxiosResponse<void>>
      > {
         const localVarAxiosArgs = await BrandApiAxiosParamCreator(
            configuration,
         ).apiBrandBrandPost(body, options)
         return (
            axios: AxiosInstance = globalAxios,
            basePath: string = BASE_PATH,
         ) => {
            const axiosRequestArgs: AxiosRequestConfig = {
               ...localVarAxiosArgs.options,
               url: basePath + localVarAxiosArgs.url,
            }
            return axios.request(axiosRequestArgs)
         }
      },
      /**
       *
       * @param {boolean} [requireTotalCount]
       * @param {boolean} [requireGroupCount]
       * @param {boolean} [isCountQuery]
       * @param {boolean} [isSummaryQuery]
       * @param {number} [skip]
       * @param {number} [take]
       * @param {Array<SortingInfo>} [sort]
       * @param {Array<GroupingInfo>} [group]
       * @param {Array<any>} [filter]
       * @param {Array<SummaryInfo>} [totalSummary]
       * @param {Array<SummaryInfo>} [groupSummary]
       * @param {Array<string>} [select]
       * @param {Array<string>} [preSelect]
       * @param {boolean} [remoteSelect]
       * @param {boolean} [remoteGrouping]
       * @param {boolean} [expandLinqSumType]
       * @param {Array<string>} [primaryKey]
       * @param {string} [defaultSort]
       * @param {boolean} [stringToLower]
       * @param {boolean} [paginateViaPrimaryKey]
       * @param {boolean} [sortByPrimaryKey]
       * @param {boolean} [allowAsyncOverSync]
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async apiBrandBrandsForGridGet(
         requireTotalCount?: boolean,
         requireGroupCount?: boolean,
         isCountQuery?: boolean,
         isSummaryQuery?: boolean,
         skip?: number,
         take?: number,
         sort?: Array<SortingInfo>,
         group?: Array<GroupingInfo>,
         filter?: Array<any>,
         totalSummary?: Array<SummaryInfo>,
         groupSummary?: Array<SummaryInfo>,
         select?: Array<string>,
         preSelect?: Array<string>,
         remoteSelect?: boolean,
         remoteGrouping?: boolean,
         expandLinqSumType?: boolean,
         primaryKey?: Array<string>,
         defaultSort?: string,
         stringToLower?: boolean,
         paginateViaPrimaryKey?: boolean,
         sortByPrimaryKey?: boolean,
         allowAsyncOverSync?: boolean,
         options?: AxiosRequestConfig,
      ): Promise<
         (
            axios?: AxiosInstance,
            basePath?: string,
         ) => Promise<AxiosResponse<RESTfulResultLoadResult>>
      > {
         const localVarAxiosArgs = await BrandApiAxiosParamCreator(
            configuration,
         ).apiBrandBrandsForGridGet(
            requireTotalCount,
            requireGroupCount,
            isCountQuery,
            isSummaryQuery,
            skip,
            take,
            sort,
            group,
            filter,
            totalSummary,
            groupSummary,
            select,
            preSelect,
            remoteSelect,
            remoteGrouping,
            expandLinqSumType,
            primaryKey,
            defaultSort,
            stringToLower,
            paginateViaPrimaryKey,
            sortByPrimaryKey,
            allowAsyncOverSync,
            options,
         )
         return (
            axios: AxiosInstance = globalAxios,
            basePath: string = BASE_PATH,
         ) => {
            const axiosRequestArgs: AxiosRequestConfig = {
               ...localVarAxiosArgs.options,
               url: basePath + localVarAxiosArgs.url,
            }
            return axios.request(axiosRequestArgs)
         }
      },
      /**
       *
       * @param {number} [pageNumber]
       * @param {number} [pageSize]
       * @param {string} [columnName]
       * @param {string} [columnValue]
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async apiBrandBrandsGet(
         pageNumber?: number,
         pageSize?: number,
         columnName?: string,
         columnValue?: string,
         options?: AxiosRequestConfig,
      ): Promise<
         (
            axios?: AxiosInstance,
            basePath?: string,
         ) => Promise<
            AxiosResponse<RESTfulResultPaginatedResponseBrandSimpleDto>
         >
      > {
         const localVarAxiosArgs = await BrandApiAxiosParamCreator(
            configuration,
         ).apiBrandBrandsGet(
            pageNumber,
            pageSize,
            columnName,
            columnValue,
            options,
         )
         return (
            axios: AxiosInstance = globalAxios,
            basePath: string = BASE_PATH,
         ) => {
            const axiosRequestArgs: AxiosRequestConfig = {
               ...localVarAxiosArgs.options,
               url: basePath + localVarAxiosArgs.url,
            }
            return axios.request(axiosRequestArgs)
         }
      },
      /**
       *
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async apiBrandDownloadBrandExcelPost(
         options?: AxiosRequestConfig,
      ): Promise<
         (
            axios?: AxiosInstance,
            basePath?: string,
         ) => Promise<AxiosResponse<RESTfulResultIActionResult>>
      > {
         const localVarAxiosArgs = await BrandApiAxiosParamCreator(
            configuration,
         ).apiBrandDownloadBrandExcelPost(options)
         return (
            axios: AxiosInstance = globalAxios,
            basePath: string = BASE_PATH,
         ) => {
            const axiosRequestArgs: AxiosRequestConfig = {
               ...localVarAxiosArgs.options,
               url: basePath + localVarAxiosArgs.url,
            }
            return axios.request(axiosRequestArgs)
         }
      },
      /**
       *
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async apiBrandDownloadBrandPdfPost(
         options?: AxiosRequestConfig,
      ): Promise<
         (
            axios?: AxiosInstance,
            basePath?: string,
         ) => Promise<AxiosResponse<RESTfulResultIActionResult>>
      > {
         const localVarAxiosArgs = await BrandApiAxiosParamCreator(
            configuration,
         ).apiBrandDownloadBrandPdfPost(options)
         return (
            axios: AxiosInstance = globalAxios,
            basePath: string = BASE_PATH,
         ) => {
            const axiosRequestArgs: AxiosRequestConfig = {
               ...localVarAxiosArgs.options,
               url: basePath + localVarAxiosArgs.url,
            }
            return axios.request(axiosRequestArgs)
         }
      },
   }
}

/**
 * BrandApi - factory interface
 * @export
 */
export const BrandApiFactory = function (
   configuration?: Configuration,
   basePath?: string,
   axios?: AxiosInstance,
) {
   return {
      /**
       *
       * @param {number} id
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async apiBrandBrandIdDelete(
         id: number,
         options?: AxiosRequestConfig,
      ): Promise<AxiosResponse<RESTfulResultBrandSimpleDto>> {
         return BrandApiFp(configuration)
            .apiBrandBrandIdDelete(id, options)
            .then((request) => request(axios, basePath))
      },
      /**
       *
       * @param {number} id
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async apiBrandBrandIdGet(
         id: number,
         options?: AxiosRequestConfig,
      ): Promise<AxiosResponse<RESTfulResultBrandSimpleDto>> {
         return BrandApiFp(configuration)
            .apiBrandBrandIdGet(id, options)
            .then((request) => request(axios, basePath))
      },
      /**
       *
       * @param {number} id
       * @param {UpdateBrandDto} [body]
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async apiBrandBrandIdPut(
         id: number,
         body?: UpdateBrandDto,
         options?: AxiosRequestConfig,
      ): Promise<AxiosResponse<RESTfulResultBrandSimpleDto>> {
         return BrandApiFp(configuration)
            .apiBrandBrandIdPut(id, body, options)
            .then((request) => request(axios, basePath))
      },
      /**
       *
       * @param {CreateBrandDto} [body]
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async apiBrandBrandPost(
         body?: CreateBrandDto,
         options?: AxiosRequestConfig,
      ): Promise<AxiosResponse<void>> {
         return BrandApiFp(configuration)
            .apiBrandBrandPost(body, options)
            .then((request) => request(axios, basePath))
      },
      /**
       *
       * @param {boolean} [requireTotalCount]
       * @param {boolean} [requireGroupCount]
       * @param {boolean} [isCountQuery]
       * @param {boolean} [isSummaryQuery]
       * @param {number} [skip]
       * @param {number} [take]
       * @param {Array<SortingInfo>} [sort]
       * @param {Array<GroupingInfo>} [group]
       * @param {Array<any>} [filter]
       * @param {Array<SummaryInfo>} [totalSummary]
       * @param {Array<SummaryInfo>} [groupSummary]
       * @param {Array<string>} [select]
       * @param {Array<string>} [preSelect]
       * @param {boolean} [remoteSelect]
       * @param {boolean} [remoteGrouping]
       * @param {boolean} [expandLinqSumType]
       * @param {Array<string>} [primaryKey]
       * @param {string} [defaultSort]
       * @param {boolean} [stringToLower]
       * @param {boolean} [paginateViaPrimaryKey]
       * @param {boolean} [sortByPrimaryKey]
       * @param {boolean} [allowAsyncOverSync]
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async apiBrandBrandsForGridGet(
         requireTotalCount?: boolean,
         requireGroupCount?: boolean,
         isCountQuery?: boolean,
         isSummaryQuery?: boolean,
         skip?: number,
         take?: number,
         sort?: Array<SortingInfo>,
         group?: Array<GroupingInfo>,
         filter?: Array<any>,
         totalSummary?: Array<SummaryInfo>,
         groupSummary?: Array<SummaryInfo>,
         select?: Array<string>,
         preSelect?: Array<string>,
         remoteSelect?: boolean,
         remoteGrouping?: boolean,
         expandLinqSumType?: boolean,
         primaryKey?: Array<string>,
         defaultSort?: string,
         stringToLower?: boolean,
         paginateViaPrimaryKey?: boolean,
         sortByPrimaryKey?: boolean,
         allowAsyncOverSync?: boolean,
         options?: AxiosRequestConfig,
      ): Promise<AxiosResponse<RESTfulResultLoadResult>> {
         return BrandApiFp(configuration)
            .apiBrandBrandsForGridGet(
               requireTotalCount,
               requireGroupCount,
               isCountQuery,
               isSummaryQuery,
               skip,
               take,
               sort,
               group,
               filter,
               totalSummary,
               groupSummary,
               select,
               preSelect,
               remoteSelect,
               remoteGrouping,
               expandLinqSumType,
               primaryKey,
               defaultSort,
               stringToLower,
               paginateViaPrimaryKey,
               sortByPrimaryKey,
               allowAsyncOverSync,
               options,
            )
            .then((request) => request(axios, basePath))
      },
      /**
       *
       * @param {number} [pageNumber]
       * @param {number} [pageSize]
       * @param {string} [columnName]
       * @param {string} [columnValue]
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async apiBrandBrandsGet(
         pageNumber?: number,
         pageSize?: number,
         columnName?: string,
         columnValue?: string,
         options?: AxiosRequestConfig,
      ): Promise<AxiosResponse<RESTfulResultPaginatedResponseBrandSimpleDto>> {
         return BrandApiFp(configuration)
            .apiBrandBrandsGet(
               pageNumber,
               pageSize,
               columnName,
               columnValue,
               options,
            )
            .then((request) => request(axios, basePath))
      },
      /**
       *
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async apiBrandDownloadBrandExcelPost(
         options?: AxiosRequestConfig,
      ): Promise<AxiosResponse<RESTfulResultIActionResult>> {
         return BrandApiFp(configuration)
            .apiBrandDownloadBrandExcelPost(options)
            .then((request) => request(axios, basePath))
      },
      /**
       *
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async apiBrandDownloadBrandPdfPost(
         options?: AxiosRequestConfig,
      ): Promise<AxiosResponse<RESTfulResultIActionResult>> {
         return BrandApiFp(configuration)
            .apiBrandDownloadBrandPdfPost(options)
            .then((request) => request(axios, basePath))
      },
   }
}

/**
 * BrandApi - object-oriented interface
 * @export
 * @class BrandApi
 * @extends {BaseAPI}
 */
export class BrandApi extends BaseAPI {
   /**
    *
    * @param {number} id
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof BrandApi
    */
   public async apiBrandBrandIdDelete(
      id: number,
      options?: AxiosRequestConfig,
   ): Promise<AxiosResponse<RESTfulResultBrandSimpleDto>> {
      return BrandApiFp(this.configuration)
         .apiBrandBrandIdDelete(id, options)
         .then((request) => request(this.axios, this.basePath))
   }
   /**
    *
    * @param {number} id
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof BrandApi
    */
   public async apiBrandBrandIdGet(
      id: number,
      options?: AxiosRequestConfig,
   ): Promise<AxiosResponse<RESTfulResultBrandSimpleDto>> {
      return BrandApiFp(this.configuration)
         .apiBrandBrandIdGet(id, options)
         .then((request) => request(this.axios, this.basePath))
   }
   /**
    *
    * @param {number} id
    * @param {UpdateBrandDto} [body]
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof BrandApi
    */
   public async apiBrandBrandIdPut(
      id: number,
      body?: UpdateBrandDto,
      options?: AxiosRequestConfig,
   ): Promise<AxiosResponse<RESTfulResultBrandSimpleDto>> {
      return BrandApiFp(this.configuration)
         .apiBrandBrandIdPut(id, body, options)
         .then((request) => request(this.axios, this.basePath))
   }
   /**
    *
    * @param {CreateBrandDto} [body]
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof BrandApi
    */
   public async apiBrandBrandPost(
      body?: CreateBrandDto,
      options?: AxiosRequestConfig,
   ): Promise<AxiosResponse<void>> {
      return BrandApiFp(this.configuration)
         .apiBrandBrandPost(body, options)
         .then((request) => request(this.axios, this.basePath))
   }
   /**
    *
    * @param {boolean} [requireTotalCount]
    * @param {boolean} [requireGroupCount]
    * @param {boolean} [isCountQuery]
    * @param {boolean} [isSummaryQuery]
    * @param {number} [skip]
    * @param {number} [take]
    * @param {Array<SortingInfo>} [sort]
    * @param {Array<GroupingInfo>} [group]
    * @param {Array<any>} [filter]
    * @param {Array<SummaryInfo>} [totalSummary]
    * @param {Array<SummaryInfo>} [groupSummary]
    * @param {Array<string>} [select]
    * @param {Array<string>} [preSelect]
    * @param {boolean} [remoteSelect]
    * @param {boolean} [remoteGrouping]
    * @param {boolean} [expandLinqSumType]
    * @param {Array<string>} [primaryKey]
    * @param {string} [defaultSort]
    * @param {boolean} [stringToLower]
    * @param {boolean} [paginateViaPrimaryKey]
    * @param {boolean} [sortByPrimaryKey]
    * @param {boolean} [allowAsyncOverSync]
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof BrandApi
    */
   public async apiBrandBrandsForGridGet(
      requireTotalCount?: boolean,
      requireGroupCount?: boolean,
      isCountQuery?: boolean,
      isSummaryQuery?: boolean,
      skip?: number,
      take?: number,
      sort?: Array<SortingInfo>,
      group?: Array<GroupingInfo>,
      filter?: Array<any>,
      totalSummary?: Array<SummaryInfo>,
      groupSummary?: Array<SummaryInfo>,
      select?: Array<string>,
      preSelect?: Array<string>,
      remoteSelect?: boolean,
      remoteGrouping?: boolean,
      expandLinqSumType?: boolean,
      primaryKey?: Array<string>,
      defaultSort?: string,
      stringToLower?: boolean,
      paginateViaPrimaryKey?: boolean,
      sortByPrimaryKey?: boolean,
      allowAsyncOverSync?: boolean,
      options?: AxiosRequestConfig,
   ): Promise<AxiosResponse<RESTfulResultLoadResult>> {
      return BrandApiFp(this.configuration)
         .apiBrandBrandsForGridGet(
            requireTotalCount,
            requireGroupCount,
            isCountQuery,
            isSummaryQuery,
            skip,
            take,
            sort,
            group,
            filter,
            totalSummary,
            groupSummary,
            select,
            preSelect,
            remoteSelect,
            remoteGrouping,
            expandLinqSumType,
            primaryKey,
            defaultSort,
            stringToLower,
            paginateViaPrimaryKey,
            sortByPrimaryKey,
            allowAsyncOverSync,
            options,
         )
         .then((request) => request(this.axios, this.basePath))
   }
   /**
    *
    * @param {number} [pageNumber]
    * @param {number} [pageSize]
    * @param {string} [columnName]
    * @param {string} [columnValue]
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof BrandApi
    */
   public async apiBrandBrandsGet(
      pageNumber?: number,
      pageSize?: number,
      columnName?: string,
      columnValue?: string,
      options?: AxiosRequestConfig,
   ): Promise<AxiosResponse<RESTfulResultPaginatedResponseBrandSimpleDto>> {
      return BrandApiFp(this.configuration)
         .apiBrandBrandsGet(
            pageNumber,
            pageSize,
            columnName,
            columnValue,
            options,
         )
         .then((request) => request(this.axios, this.basePath))
   }
   /**
    *
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof BrandApi
    */
   public async apiBrandDownloadBrandExcelPost(
      options?: AxiosRequestConfig,
   ): Promise<AxiosResponse<RESTfulResultIActionResult>> {
      return BrandApiFp(this.configuration)
         .apiBrandDownloadBrandExcelPost(options)
         .then((request) => request(this.axios, this.basePath))
   }
   /**
    *
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof BrandApi
    */
   public async apiBrandDownloadBrandPdfPost(
      options?: AxiosRequestConfig,
   ): Promise<AxiosResponse<RESTfulResultIActionResult>> {
      return BrandApiFp(this.configuration)
         .apiBrandDownloadBrandPdfPost(options)
         .then((request) => request(this.axios, this.basePath))
   }
}
