/* tslint:disable */
/* eslint-disable */
/**
 * 规范化接口演示
 * 让 .NET 开发更简单，更通用，更流行。
 *
 * OpenAPI spec version: 1.0.0
 * Contact: monksoul@outlook.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateSaleDto } from '../models';
import { GroupingInfo } from '../models';
import { RESTfulResultItemSaleDto } from '../models';
import { RESTfulResultLoadResult } from '../models';
import { RESTfulResultPaginatedResultSaleDto } from '../models';
import { RESTfulResultSaleDto } from '../models';
import { SortingInfo } from '../models';
import { SummaryInfo } from '../models';
/**
 * SaleApi - axios parameter creator
 * @export
 */
export const SaleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} itemsaleid 
         * @param {number} quantity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSaleItemSaleQuantityItemsaleidQuantityPut: async (itemsaleid: number, quantity: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemsaleid' is not null or undefined
            if (itemsaleid === null || itemsaleid === undefined) {
                throw new RequiredError('itemsaleid','Required parameter itemsaleid was null or undefined when calling apiSaleItemSaleQuantityItemsaleidQuantityPut.');
            }
            // verify required parameter 'quantity' is not null or undefined
            if (quantity === null || quantity === undefined) {
                throw new RequiredError('quantity','Required parameter quantity was null or undefined when calling apiSaleItemSaleQuantityItemsaleidQuantityPut.');
            }
            const localVarPath = `/api/sale/item-sale-quantity/{itemsaleid}/{quantity}`
                .replace(`{${"itemsaleid"}}`, encodeURIComponent(String(itemsaleid)))
                .replace(`{${"quantity"}}`, encodeURIComponent(String(quantity)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSaleSaleIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiSaleSaleIdGet.');
            }
            const localVarPath = `/api/sale/sale/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateSaleDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSaleSalePost: async (body?: CreateSaleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sale/sale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} saleid 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSaleSaleStatusSaleidStatusPut: async (saleid: number, status: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saleid' is not null or undefined
            if (saleid === null || saleid === undefined) {
                throw new RequiredError('saleid','Required parameter saleid was null or undefined when calling apiSaleSaleStatusSaleidStatusPut.');
            }
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new RequiredError('status','Required parameter status was null or undefined when calling apiSaleSaleStatusSaleidStatusPut.');
            }
            const localVarPath = `/api/sale/sale-status/{saleid}/{status}`
                .replace(`{${"saleid"}}`, encodeURIComponent(String(saleid)))
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [requireTotalCount] 
         * @param {boolean} [requireGroupCount] 
         * @param {boolean} [isCountQuery] 
         * @param {boolean} [isSummaryQuery] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {Array<SortingInfo>} [sort] 
         * @param {Array<GroupingInfo>} [group] 
         * @param {Array<any>} [filter] 
         * @param {Array<SummaryInfo>} [totalSummary] 
         * @param {Array<SummaryInfo>} [groupSummary] 
         * @param {Array<string>} [select] 
         * @param {Array<string>} [preSelect] 
         * @param {boolean} [remoteSelect] 
         * @param {boolean} [remoteGrouping] 
         * @param {boolean} [expandLinqSumType] 
         * @param {Array<string>} [primaryKey] 
         * @param {string} [defaultSort] 
         * @param {boolean} [stringToLower] 
         * @param {boolean} [paginateViaPrimaryKey] 
         * @param {boolean} [sortByPrimaryKey] 
         * @param {boolean} [allowAsyncOverSync] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSaleSalesForGridGet: async (requireTotalCount?: boolean, requireGroupCount?: boolean, isCountQuery?: boolean, isSummaryQuery?: boolean, skip?: number, take?: number, sort?: Array<SortingInfo>, group?: Array<GroupingInfo>, filter?: Array<any>, totalSummary?: Array<SummaryInfo>, groupSummary?: Array<SummaryInfo>, select?: Array<string>, preSelect?: Array<string>, remoteSelect?: boolean, remoteGrouping?: boolean, expandLinqSumType?: boolean, primaryKey?: Array<string>, defaultSort?: string, stringToLower?: boolean, paginateViaPrimaryKey?: boolean, sortByPrimaryKey?: boolean, allowAsyncOverSync?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sale/sales-for-grid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (requireTotalCount !== undefined) {
                localVarQueryParameter['RequireTotalCount'] = requireTotalCount;
            }

            if (requireGroupCount !== undefined) {
                localVarQueryParameter['RequireGroupCount'] = requireGroupCount;
            }

            if (isCountQuery !== undefined) {
                localVarQueryParameter['IsCountQuery'] = isCountQuery;
            }

            if (isSummaryQuery !== undefined) {
                localVarQueryParameter['IsSummaryQuery'] = isSummaryQuery;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (sort) {
                localVarQueryParameter['Sort'] = sort;
            }

            if (group) {
                localVarQueryParameter['Group'] = group;
            }

            if (filter) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (totalSummary) {
                localVarQueryParameter['TotalSummary'] = totalSummary;
            }

            if (groupSummary) {
                localVarQueryParameter['GroupSummary'] = groupSummary;
            }

            if (select) {
                localVarQueryParameter['Select'] = select;
            }

            if (preSelect) {
                localVarQueryParameter['PreSelect'] = preSelect;
            }

            if (remoteSelect !== undefined) {
                localVarQueryParameter['RemoteSelect'] = remoteSelect;
            }

            if (remoteGrouping !== undefined) {
                localVarQueryParameter['RemoteGrouping'] = remoteGrouping;
            }

            if (expandLinqSumType !== undefined) {
                localVarQueryParameter['ExpandLinqSumType'] = expandLinqSumType;
            }

            if (primaryKey) {
                localVarQueryParameter['PrimaryKey'] = primaryKey;
            }

            if (defaultSort !== undefined) {
                localVarQueryParameter['DefaultSort'] = defaultSort;
            }

            if (stringToLower !== undefined) {
                localVarQueryParameter['StringToLower'] = stringToLower;
            }

            if (paginateViaPrimaryKey !== undefined) {
                localVarQueryParameter['PaginateViaPrimaryKey'] = paginateViaPrimaryKey;
            }

            if (sortByPrimaryKey !== undefined) {
                localVarQueryParameter['SortByPrimaryKey'] = sortByPrimaryKey;
            }

            if (allowAsyncOverSync !== undefined) {
                localVarQueryParameter['AllowAsyncOverSync'] = allowAsyncOverSync;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [columnName] 
         * @param {string} [columnValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSaleSalesGet: async (pageNumber?: number, pageSize?: number, columnName?: string, columnValue?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sale/sales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (columnName !== undefined) {
                localVarQueryParameter['ColumnName'] = columnName;
            }

            if (columnValue !== undefined) {
                localVarQueryParameter['ColumnValue'] = columnValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SaleApi - functional programming interface
 * @export
 */
export const SaleApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} itemsaleid 
         * @param {number} quantity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSaleItemSaleQuantityItemsaleidQuantityPut(itemsaleid: number, quantity: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultItemSaleDto>>> {
            const localVarAxiosArgs = await SaleApiAxiosParamCreator(configuration).apiSaleItemSaleQuantityItemsaleidQuantityPut(itemsaleid, quantity, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSaleSaleIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultSaleDto>>> {
            const localVarAxiosArgs = await SaleApiAxiosParamCreator(configuration).apiSaleSaleIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {CreateSaleDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSaleSalePost(body?: CreateSaleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultSaleDto>>> {
            const localVarAxiosArgs = await SaleApiAxiosParamCreator(configuration).apiSaleSalePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} saleid 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSaleSaleStatusSaleidStatusPut(saleid: number, status: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultSaleDto>>> {
            const localVarAxiosArgs = await SaleApiAxiosParamCreator(configuration).apiSaleSaleStatusSaleidStatusPut(saleid, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {boolean} [requireTotalCount] 
         * @param {boolean} [requireGroupCount] 
         * @param {boolean} [isCountQuery] 
         * @param {boolean} [isSummaryQuery] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {Array<SortingInfo>} [sort] 
         * @param {Array<GroupingInfo>} [group] 
         * @param {Array<any>} [filter] 
         * @param {Array<SummaryInfo>} [totalSummary] 
         * @param {Array<SummaryInfo>} [groupSummary] 
         * @param {Array<string>} [select] 
         * @param {Array<string>} [preSelect] 
         * @param {boolean} [remoteSelect] 
         * @param {boolean} [remoteGrouping] 
         * @param {boolean} [expandLinqSumType] 
         * @param {Array<string>} [primaryKey] 
         * @param {string} [defaultSort] 
         * @param {boolean} [stringToLower] 
         * @param {boolean} [paginateViaPrimaryKey] 
         * @param {boolean} [sortByPrimaryKey] 
         * @param {boolean} [allowAsyncOverSync] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSaleSalesForGridGet(requireTotalCount?: boolean, requireGroupCount?: boolean, isCountQuery?: boolean, isSummaryQuery?: boolean, skip?: number, take?: number, sort?: Array<SortingInfo>, group?: Array<GroupingInfo>, filter?: Array<any>, totalSummary?: Array<SummaryInfo>, groupSummary?: Array<SummaryInfo>, select?: Array<string>, preSelect?: Array<string>, remoteSelect?: boolean, remoteGrouping?: boolean, expandLinqSumType?: boolean, primaryKey?: Array<string>, defaultSort?: string, stringToLower?: boolean, paginateViaPrimaryKey?: boolean, sortByPrimaryKey?: boolean, allowAsyncOverSync?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultLoadResult>>> {
            const localVarAxiosArgs = await SaleApiAxiosParamCreator(configuration).apiSaleSalesForGridGet(requireTotalCount, requireGroupCount, isCountQuery, isSummaryQuery, skip, take, sort, group, filter, totalSummary, groupSummary, select, preSelect, remoteSelect, remoteGrouping, expandLinqSumType, primaryKey, defaultSort, stringToLower, paginateViaPrimaryKey, sortByPrimaryKey, allowAsyncOverSync, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [columnName] 
         * @param {string} [columnValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSaleSalesGet(pageNumber?: number, pageSize?: number, columnName?: string, columnValue?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultPaginatedResultSaleDto>>> {
            const localVarAxiosArgs = await SaleApiAxiosParamCreator(configuration).apiSaleSalesGet(pageNumber, pageSize, columnName, columnValue, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SaleApi - factory interface
 * @export
 */
export const SaleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} itemsaleid 
         * @param {number} quantity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSaleItemSaleQuantityItemsaleidQuantityPut(itemsaleid: number, quantity: number, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultItemSaleDto>> {
            return SaleApiFp(configuration).apiSaleItemSaleQuantityItemsaleidQuantityPut(itemsaleid, quantity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSaleSaleIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultSaleDto>> {
            return SaleApiFp(configuration).apiSaleSaleIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateSaleDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSaleSalePost(body?: CreateSaleDto, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultSaleDto>> {
            return SaleApiFp(configuration).apiSaleSalePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} saleid 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSaleSaleStatusSaleidStatusPut(saleid: number, status: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultSaleDto>> {
            return SaleApiFp(configuration).apiSaleSaleStatusSaleidStatusPut(saleid, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [requireTotalCount] 
         * @param {boolean} [requireGroupCount] 
         * @param {boolean} [isCountQuery] 
         * @param {boolean} [isSummaryQuery] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {Array<SortingInfo>} [sort] 
         * @param {Array<GroupingInfo>} [group] 
         * @param {Array<any>} [filter] 
         * @param {Array<SummaryInfo>} [totalSummary] 
         * @param {Array<SummaryInfo>} [groupSummary] 
         * @param {Array<string>} [select] 
         * @param {Array<string>} [preSelect] 
         * @param {boolean} [remoteSelect] 
         * @param {boolean} [remoteGrouping] 
         * @param {boolean} [expandLinqSumType] 
         * @param {Array<string>} [primaryKey] 
         * @param {string} [defaultSort] 
         * @param {boolean} [stringToLower] 
         * @param {boolean} [paginateViaPrimaryKey] 
         * @param {boolean} [sortByPrimaryKey] 
         * @param {boolean} [allowAsyncOverSync] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSaleSalesForGridGet(requireTotalCount?: boolean, requireGroupCount?: boolean, isCountQuery?: boolean, isSummaryQuery?: boolean, skip?: number, take?: number, sort?: Array<SortingInfo>, group?: Array<GroupingInfo>, filter?: Array<any>, totalSummary?: Array<SummaryInfo>, groupSummary?: Array<SummaryInfo>, select?: Array<string>, preSelect?: Array<string>, remoteSelect?: boolean, remoteGrouping?: boolean, expandLinqSumType?: boolean, primaryKey?: Array<string>, defaultSort?: string, stringToLower?: boolean, paginateViaPrimaryKey?: boolean, sortByPrimaryKey?: boolean, allowAsyncOverSync?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultLoadResult>> {
            return SaleApiFp(configuration).apiSaleSalesForGridGet(requireTotalCount, requireGroupCount, isCountQuery, isSummaryQuery, skip, take, sort, group, filter, totalSummary, groupSummary, select, preSelect, remoteSelect, remoteGrouping, expandLinqSumType, primaryKey, defaultSort, stringToLower, paginateViaPrimaryKey, sortByPrimaryKey, allowAsyncOverSync, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [columnName] 
         * @param {string} [columnValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSaleSalesGet(pageNumber?: number, pageSize?: number, columnName?: string, columnValue?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultPaginatedResultSaleDto>> {
            return SaleApiFp(configuration).apiSaleSalesGet(pageNumber, pageSize, columnName, columnValue, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SaleApi - object-oriented interface
 * @export
 * @class SaleApi
 * @extends {BaseAPI}
 */
export class SaleApi extends BaseAPI {
    /**
     * 
     * @param {number} itemsaleid 
     * @param {number} quantity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleApi
     */
    public async apiSaleItemSaleQuantityItemsaleidQuantityPut(itemsaleid: number, quantity: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultItemSaleDto>> {
        return SaleApiFp(this.configuration).apiSaleItemSaleQuantityItemsaleidQuantityPut(itemsaleid, quantity, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleApi
     */
    public async apiSaleSaleIdGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultSaleDto>> {
        return SaleApiFp(this.configuration).apiSaleSaleIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {CreateSaleDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleApi
     */
    public async apiSaleSalePost(body?: CreateSaleDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultSaleDto>> {
        return SaleApiFp(this.configuration).apiSaleSalePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} saleid 
     * @param {string} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleApi
     */
    public async apiSaleSaleStatusSaleidStatusPut(saleid: number, status: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultSaleDto>> {
        return SaleApiFp(this.configuration).apiSaleSaleStatusSaleidStatusPut(saleid, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {boolean} [requireTotalCount] 
     * @param {boolean} [requireGroupCount] 
     * @param {boolean} [isCountQuery] 
     * @param {boolean} [isSummaryQuery] 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {Array<SortingInfo>} [sort] 
     * @param {Array<GroupingInfo>} [group] 
     * @param {Array<any>} [filter] 
     * @param {Array<SummaryInfo>} [totalSummary] 
     * @param {Array<SummaryInfo>} [groupSummary] 
     * @param {Array<string>} [select] 
     * @param {Array<string>} [preSelect] 
     * @param {boolean} [remoteSelect] 
     * @param {boolean} [remoteGrouping] 
     * @param {boolean} [expandLinqSumType] 
     * @param {Array<string>} [primaryKey] 
     * @param {string} [defaultSort] 
     * @param {boolean} [stringToLower] 
     * @param {boolean} [paginateViaPrimaryKey] 
     * @param {boolean} [sortByPrimaryKey] 
     * @param {boolean} [allowAsyncOverSync] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleApi
     */
    public async apiSaleSalesForGridGet(requireTotalCount?: boolean, requireGroupCount?: boolean, isCountQuery?: boolean, isSummaryQuery?: boolean, skip?: number, take?: number, sort?: Array<SortingInfo>, group?: Array<GroupingInfo>, filter?: Array<any>, totalSummary?: Array<SummaryInfo>, groupSummary?: Array<SummaryInfo>, select?: Array<string>, preSelect?: Array<string>, remoteSelect?: boolean, remoteGrouping?: boolean, expandLinqSumType?: boolean, primaryKey?: Array<string>, defaultSort?: string, stringToLower?: boolean, paginateViaPrimaryKey?: boolean, sortByPrimaryKey?: boolean, allowAsyncOverSync?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultLoadResult>> {
        return SaleApiFp(this.configuration).apiSaleSalesForGridGet(requireTotalCount, requireGroupCount, isCountQuery, isSummaryQuery, skip, take, sort, group, filter, totalSummary, groupSummary, select, preSelect, remoteSelect, remoteGrouping, expandLinqSumType, primaryKey, defaultSort, stringToLower, paginateViaPrimaryKey, sortByPrimaryKey, allowAsyncOverSync, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [columnName] 
     * @param {string} [columnValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleApi
     */
    public async apiSaleSalesGet(pageNumber?: number, pageSize?: number, columnName?: string, columnValue?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultPaginatedResultSaleDto>> {
        return SaleApiFp(this.configuration).apiSaleSalesGet(pageNumber, pageSize, columnName, columnValue, options).then((request) => request(this.axios, this.basePath));
    }
}
